name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            build_type: Release
            name: "Windows MSVC"
            vcpkg_triplet: x64-windows # Standard vcpkg triplet for 64-bit Windows
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            build_type: Release
            name: "Linux GCC"
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
            build_type: Release
            name: "Linux Clang"

    steps:
    - uses: actions/checkout@v4

    - name: Install SFML (Linux)
      if: runner.os == 'Linux'
      run: sudo apt-get update && sudo apt-get install -y libsfml-dev

    - name: Install vcpkg and SFML (Windows)
      if: runner.os == 'Windows'
      run: |
        git clone https://github.com/microsoft/vcpkg.git
        cd vcpkg
        ./bootstrap-vcpkg.bat -disableMetrics
        ./vcpkg install sfml:${{ matrix.vcpkg_triplet }} --recurse
      shell: pwsh
      # working-directory default is github.workspace, so vcpkg is cloned into github.workspace/vcpkg

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          # For multi-config generators like MSVC, output is in build/<Config>
          echo "artifact-output-dir=${{ github.workspace }}/build/${{ matrix.build_type }}" >> "$GITHUB_OUTPUT"
        else
          # For single-config generators, output is directly in build dir
          echo "artifact-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
        fi

    - name: Configure CMake (Windows)
      if: runner.os == 'Windows'
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake
        -DVCPKG_TARGET_TRIPLET=${{ matrix.vcpkg_triplet }}
        -S ${{ github.workspace }}
      shell: bash # Using bash for consistency, but default would also work

    - name: Configure CMake (Linux)
      if: runner.os == 'Linux'
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}
      shell: bash # Using bash for consistency

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}
      shell: bash # Using bash for consistency

    - name: List build artifacts (for debugging)
      if: always() # Run even if previous steps fail, to aid debugging
      shell: bash
      run: |
        echo "Listing content of build directory: ${{ steps.strings.outputs.build-output-dir }}"
        ls -R ${{ steps.strings.outputs.build-output-dir }}
        echo "Expected artifact output directory: ${{ steps.strings.outputs.artifact-output-dir }}"
        ls -R ${{ steps.strings.outputs.artifact-output-dir }} || echo "Artifact output directory not found or empty."

    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.name }}-${{ matrix.build_type }}-Build-Output
        path: ${{ steps.strings.outputs.artifact-output-dir }}
        if-no-files-found: warn # Use 'error' if an empty artifact is a failure
